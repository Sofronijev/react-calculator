{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Display","props","className","id","formula","result","Buttons","onClick","handleClear","handleOperators","handleNumber","handleEqual","handleDecimal","negativeSignLast","endsWithOperator","endsWithNegativeSign","endsWithNumberDot","endsWithZeroAfterOperator","state","evaluated","maxNumber","handleKeyDown","e","key","log","test","handleEqualNoEval","character","setState","slice","includes","length","operator","Math","round","eval","finalResult","checkForAddOrSub","number","some","part","i","parseFloat","undefined","splice","toString","checkForMultyOrDev","addEventListener","this","removeEventListener","React","Component"],"mappings":"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","file":"static/js/main.1e0509ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\n\nfunction Display(props) {\n  return (\n    <div className=\"display\">\n      <p id=\"preview\">{props.formula}</p>\n      <p id=\"display\">{props.result}</p>\n    </div>\n  );\n\n}\n\nfunction Buttons(props) {\n  return (\n    <div className=\"buttons\">\n      <button onClick={props.handleClear} id=\"clear\">AC</button>\n      <button className=\"operator\" onClick={() => props.handleOperators(\"/\")} id=\"divide\">/</button>\n      <button className=\"operator\" onClick={() => props.handleOperators(\"*\")} id=\"multiply\">*</button>\n      <button onClick={() => props.handleNumber(\"7\")} id=\"seven\">7</button>\n      <button onClick={() => props.handleNumber(\"8\")} id=\"eight\">8</button>\n      <button onClick={() => props.handleNumber(\"9\")} id=\"nine\">9</button>\n      <button className=\"operator\" onClick={() => props.handleOperators(\"-\")} id=\"subtract\">-</button>\n      <button onClick={() => props.handleNumber(\"4\")} id=\"four\">4</button>\n      <button onClick={() => props.handleNumber(\"5\")} id=\"five\">5</button>\n      <button onClick={() => props.handleNumber(\"6\")} id=\"six\">6</button>\n      <button className=\"operator\" onClick={() => props.handleOperators(\"+\")} id=\"add\">+</button>\n      <button onClick={() => props.handleNumber(\"1\")} id=\"one\">1</button>\n      <button onClick={() => props.handleNumber(\"2\")} id=\"two\">2</button>\n      <button onClick={() => props.handleNumber(\"3\")} id=\"three\">3</button>\n      <button onClick={props.handleEqual} id=\"equals\">=</button>\n      <button onClick={() => props.handleNumber(\"0\")} id=\"zero\">0</button>\n      <button onClick={props.handleDecimal} id=\"decimal\">.</button>\n\n    </div>\n  );\n}\n\nconst negativeSignLast = /-$/;\nconst endsWithOperator = /[*+/-]$/;\nconst endsWithNegativeSign = /[*/+]-$/;\nconst endsWithNumberDot = /[0-9.]$/;\nconst endsWithZeroAfterOperator = /[*/+-]0$/;\n\n\nclass App extends React.Component {\n  state = {\n    formula: \"\",\n    result: \"0\",\n    evaluated: false,\n    maxNumber: false\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    let key = e.key;\n    console.log(key)\n    //check if pressed key is number\n    if (/[0-9]/.test(key)) {\n      this.handleNumber(key);\n      //check if operator is pressed  \n    } else if (/[/*+-]/.test(key)) {\n      this.handleOperators(key);\n    } else if (key === \".\") {\n      this.handleDecimal();\n    } else if (key === \"=\") {\n      this.handleEqualNoEval();\n    } else if (key === \"Backspace\") {\n      this.handleClear();\n    } else if (key === \"Enter\") {\n      this.handleEqualNoEval()\n    };\n  };\n\n  handleNumber = (character) => {\n    if (!this.state.maxNumber) {\n      if (!this.state.evaluated) {\n        //checks if we clicked on 0 and first character of result is 0 and not decimal, then we dont type anymore 0\n        if (character === \"0\" && (this.state.result.slice(0, 1) === \"0\" && !this.state.result.includes(\".\"))) {\n          return;\n          //if formula ends with operator and 0 (+0) or formula contains only 0, removes last character and adds the one we clicked (not 0)\n        } else if (endsWithZeroAfterOperator.test(this.state.formula) || this.state.formula === \"0\") {\n          this.setState({\n            formula: this.state.formula.slice(0, -1) + character,\n            result: this.state.result.slice(0, -1) + character\n          });\n          //in all other cases just adds character, for results checks if its a new number\n        } else {\n          this.setState({\n            formula: this.state.formula + character,\n            // if formula ends with number or dot ,concats text, else creates new result\n            result: (endsWithNumberDot.test(this.state.formula) ? this.state.result + character : character)\n          }, () => {\n            //limit number length (this is best place to use function because it counts length right after updating)\n            if (this.state.result.length >= 16) {\n              this.setState({\n                maxNumber: true\n              });\n            }\n          });\n        }\n\n      } else {\n        this.setState({\n          formula: character,\n          result: character,\n          evaluated: false,\n          maxNumber: false,\n        });\n      }\n    }\n  }\n\n  handleOperators = (operator) => {\n    let formula = this.state.formula;\n    if (!this.state.evaluated) {\n      this.setState({\n        maxNumber: false\n      })\n      //clicked operator\n      //if formula is empty and doesnt end with '-' and selected operator is '-', adds '-' to end\n      if ((formula === \"\" || !negativeSignLast.test(formula)) && operator === \"-\") {\n        this.setState({\n          formula: formula + operator\n        });\n        //if formula isnt empty and doesnt end with operator adds clicked operator '+ * /'\n      } else if (formula !== \"\" && !endsWithOperator.test(formula)) {\n        this.setState({\n          formula: formula + operator\n        });\n        //if formula ends with negative sign and some other [+/*]-, and clicked operator is not '-', removes last 2 operator and adds new one\n        // formula: 9*- \n        //clicked: +\n        // new formula: 9+\n      } else if (endsWithNegativeSign.test(formula) && operator !== \"-\") {\n        this.setState({\n          formula: formula.slice(0, -2) + operator\n        });\n        // if formula ends with operator and its not only character in formula, removes last operator and adds new one\n        //formula: 9*\n        //clicked: /\n        //new formula: 9-\n      } else if (endsWithOperator.test(formula) && formula.length !== 1) {\n        this.setState({\n          formula: formula.slice(0, -1) + operator\n        });\n      }\n      //if result is evaluated, result becomes formula and adds clicked operator\n    } else {\n      this.setState({\n        formula: this.state.result + operator,\n        evaluated: false,\n        maxNumber: false\n      });\n    }\n  }\n  handleDecimal = (e) => {\n    if (this.state.evaluated) {\n      this.setState({\n        formula: \"0.\",\n        result: \"0.\",\n        evaluated: false\n      })\n    } else {\n      if (this.state.result.includes(\".\") && !endsWithOperator.test(this.state.formula)) {\n        return;\n      } else if (this.state.formula === \"\") {\n        this.setState({\n          formula: \"0.\",\n          result: \"0.\"\n        });\n      } else if (endsWithOperator.test(this.state.formula)) {\n        this.setState({\n          formula: this.state.formula + \"0.\",\n          result: \"0.\"\n        });\n      } else {\n        this.setState({\n          formula: this.state.formula + \".\",\n          result: this.state.result + \".\"\n        });\n      }\n    }\n  }\n  handleClear = () => {\n    this.setState({\n      formula: \"\",\n      result: \"0\",\n      evaluated: false,\n      maxNumber: false\n    })\n  }\n  //evaluating using eval function\n  handleEqual = () => {\n    let formula = this.state.formula;\n    //if its already calculated it doesnt work\n    if (this.state.evaluated || this.state.formula === \"\") {\n      return;\n    }\n    //while there is operator at end, removes it\n    while (endsWithOperator.test(formula)) {\n      formula = formula.slice(0, -1);\n    }\n    if (formula === \"\") {\n      return;\n    }\n    this.setState({\n      formula: formula + '=' + Math.round(1000000000000 * eval(formula)) / 1000000000000,\n      result: Math.round(1000000000000 * eval(formula)) / 1000000000000,\n      evaluated: true,\n      maxNumber: false\n    })\n  }\n  //evaluating whitout eval function\n  handleEqualNoEval = () => {\n    let formula = this.state.formula;\n    if (this.state.evaluated || this.state.formula === \"\") {\n      return;\n    }\n    //while there is operator at end, removes it\n    while (endsWithOperator.test(formula)) {\n      formula = formula.slice(0, -1);\n    }\n    if (formula === \"\") {\n      return;\n    }\n    let splitFormula = formula.match(/[\\d.]+|\\D+/g);\n\n    //RECURSION\n    //checks for multiply and divison \n    const checkForMultyOrDev = (formula) => {\n      let number = 0;\n      if (!formula.some(part => { return part.includes(\"*\") || part.includes(\"/\") })) {\n        return formula;\n      }\n      for (let i = 0; i < formula.length; i++) {\n        if (formula[i].includes(\"*\") || formula[i].includes(\"/\")) {\n          switch (formula[i]) {\n            case \"*\":\n              number = parseFloat(formula[i - 1]) * parseFloat(formula[i + 1]);\n              break;\n            case \"*-\":\n              number = parseFloat(formula[i - 1]) * - parseFloat(formula[i + 1]);\n              break;\n            case \"/\":\n              number = parseFloat(formula[i - 1]) / parseFloat(formula[i + 1]);\n              break;\n            case \"/-\":\n              number = parseFloat(formula[i - 1]) / - parseFloat(formula[i + 1]);\n              break;\n          }\n          //need to transform number to string so i dont get error when function runs another time\n          formula.splice(i - 1, 3, number.toString());\n          //i resets to 0 so it always starts from begining of formula\n          i = 0;\n        }\n      }\n      return checkForMultyOrDev(formula);\n    }\n    //RECURSION\n    //Checks for add and subtract\n    const checkForAddOrSub = (formula) => {\n      let number = 0;\n      if (!formula.some(part => { return part.includes(\"+\") || part.includes(\"-\") }) || formula.length === 1) {\n        return formula;\n      }\n      for (let i = 0; i < formula.length; i++) {\n        if (formula[i].includes(\"+\") || formula[i].includes(\"-\")) {\n          switch (formula[i]) {\n            case \"+\":\n              number = parseFloat(formula[i - 1]) + parseFloat(formula[i + 1]);\n              break;\n            case \"+-\":\n              number = parseFloat(formula[i - 1]) + - parseFloat(formula[i + 1]);\n              break;\n            case \"-\":\n              // if we find - and its first element in array then we just create negative number from next element in array\n              //example: [\"-\", \"9\", \"+\", \"9\"]  => -1 * 9 => -9 => [\"-9\", \"+\", \"9\"]\n              if (formula[i - 1] !== undefined) {\n                number = parseFloat(formula[i - 1]) - parseFloat(formula[i + 1]);\n              } else {\n                number = -1 * parseFloat(formula[i + 1]);\n              }\n              break;\n          }\n          //need to transform number to string so i dont get error when function runs another time\n          // if i === 0 , then - is first element and splice needs to change\n          i === 0 ? formula.splice(i, 2, number.toString()) : formula.splice(i - 1, 3, number.toString());\n          i = 0;\n        }\n      }\n      return checkForAddOrSub(formula);\n    }\n\n    let formulaAfterMultyAndDev = checkForMultyOrDev(splitFormula);\n    let finalResult = checkForAddOrSub(formulaAfterMultyAndDev);\n\n    this.setState({\n      //math.round is for decimal numbers, js can make problems\n      formula: formula + '=' + Math.round(1000000000000 * finalResult) / 1000000000000,\n      result: Math.round(1000000000000 * finalResult) / 1000000000000,\n      evaluated: true,\n      maxNumber: false\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Display\n          formula={this.state.formula}\n          result={this.state.result}\n        />\n        <Buttons\n          handleNumber={this.handleNumber}\n          handleOperators={this.handleOperators}\n          handleDecimal={this.handleDecimal}\n          handleClear={this.handleClear}\n          //Select what function to use for equation\n          //handleEqual={this.handleEqual}\n          handleEqual={this.handleEqualNoEval}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"],"sourceRoot":""}